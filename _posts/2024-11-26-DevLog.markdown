---
layout: post
title: "开发日志 第0天"
date: 2024-11-26
categories: dev-log
---
### 📚 开发日志 第0天

#### 📅 日期

```markdown
2024年11月26日
```

---

#### 📖 开发学习内容
- **Session**、**Cookie**、**JWT**、**Filter**、**Interceptor**、**Transactional**、**AOP**：今天学习了这些 Java Web 相关的技术概念，了解它们在 Web 开发中的具体应用和重要性。
- **[GitHub Page 视频教程](https://www.youtube.com/watch?v=EmSrQCDsMv4&t=0s)**：观看了一个关于 GitHub Pages 的视频，学习如何创建静态网站，并通过 GitHub Pages 发布网站。
  
这些内容涉及到的技术不仅仅是基础的 Web 开发，还包括了与安全、事务管理和跨域处理相关的重要概念。

---

#### 📚 使用资源
- **[黑马 JavaWeb 课程](https://www.bilibili.com/video/BV1TP411v7v6/?spm_id_from=333.999.0.0&vd_source=63593771069c35f66fcc46108f09f670)**：通过观看黑马 Java Web 视频课程，深入学习了 Session、Cookie、JWT 等知识。
- **[GitHub Page 视频](https://www.youtube.com/watch?v=EmSrQCDsMv4&t=0s)**：这个视频教程帮助我理解了如何将项目通过 GitHub Pages 部署到线上，掌握了静态网站托管的方法。

---

#### 🧠 关键知识点
- **Session 与 Cookie 的区别与联系**：Session 存储在服务器端，而 Cookie 存储在客户端。Session 更适合保存用户会话信息，Cookie 可以用于在客户端存储用户的状态信息。
- **JWT**：JSON Web Token，用于实现无状态的认证，适合分布式系统中进行用户认证。
- **Filter 与 Interceptor**：两者都用于处理请求和响应，但 Filter 更偏向于处理底层的请求过滤，Interceptor 是更高层次的请求拦截器。
- **AOP（面向切面编程）**：通过预定义的切面代码，可以在程序运行时动态地将功能应用到多个类或方法上，从而解耦业务逻辑。
- **Transactional**：用于确保事务的原子性，通常用于数据库操作，保证操作的完整性。

---

#### 🛠️ 实践与应用
- 在项目中实际使用了 **JWT** 来实现用户认证，并通过 **Filter** 处理请求的拦截。
- 学习并配置了 **GitHub Pages**，为自己的项目建立了一个简单的静态网站，上传并展示了开发日志。
- 开始着手设计项目中的 **AOP** 机制，通过切面处理日志记录功能，提升代码的可维护性。

---

#### 🧩 遇到的挑战
- 在实现 **JWT** 的过程中，遇到过 Token 过期的问题，解决方法是添加了 Token 刷新机制，以确保用户认证的连续性。
- 学习 **AOP** 时，对切面注解的使用有些困惑，查阅了相关文档和示例代码后，理解了如何通过 `@Before`、`@After` 注解来指定切面逻辑。

---

#### 💡 下一步计划
- **写博客**：总结今天学习的技术点和遇到的问题，准备写一篇博客分享学习过程。
- **起项目**：基于今天学到的知识，开始设计一个简单的用户认证和权限管理系统，涉及到 JWT、Session 等技术。

---

#### 💬 反思与感想
今天的学习内容非常有用，尤其是学习了如何通过 **JWT** 处理认证，这对于开发现代 Web 应用非常重要。同时，学习了如何使用 **AOP** 进行日志记录，提高了对代码结构化和模块化的理解。接下来，我会根据今天学到的知识，尝试实现一些实际功能，并将学习成果整理成博客与他人分享。

---

